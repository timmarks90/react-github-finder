{"ast":null,"code":"var _jsxFileName = \"/Users/timmarks/Documents/Coding/Udemy/traversy-react-front-to-back/react-github-finder/src/context/github/GithubContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from 'react';\nimport githubReducer from './GithubReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GithubContext = /*#__PURE__*/createContext();\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL;\nconst GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN;\nexport const GithubProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false\n  };\n  const [state, dispatch] = useReducer(githubReducer, initialState); // Get search results\n\n  const searchUsers = async text => {\n    setLoading();\n    const params = new URLSearchParams({\n      q: text\n    });\n    const response = await fetch(`${GITHUB_URL}/search/users?${params}`, {\n      headers: {\n        Authorization: `token ${GITHUB_TOKEN}`\n      }\n    });\n    const {\n      items\n    } = await response.json();\n    dispatch({\n      type: 'GET_USERS',\n      payload: items\n    });\n  }; // Get single user\n\n\n  const getUser = async login => {\n    setLoading();\n    const response = await fetch(`${GITHUB_URL}/users/${login}`, {\n      headers: {\n        Authorization: `token ${GITHUB_TOKEN}`\n      }\n    });\n\n    if (response.status === 404) {\n      window.location = '/notfound';\n    } else {\n      const data = await response.json();\n      dispatch({\n        type: 'GET_USER',\n        payload: data\n      });\n    }\n\n    ;\n  }; // Get repos\n\n\n  const getUserRepos = async login => {\n    setLoading();\n    const response = await fetch(`${GITHUB_URL}/users/${login}/repos`, {\n      headers: {\n        Authorization: `token ${GITHUB_TOKEN}`\n      }\n    });\n    const {\n      data\n    } = await response.json();\n    dispatch({\n      type: 'GET_REPOS',\n      payload: data\n    });\n  };\n\n  const clearUsers = () => {\n    dispatch({\n      type: 'CLEAR_USERS'\n    });\n  }; // Set loading\n\n\n  const setLoading = () => {\n    dispatch({\n      type: 'SET_LOADING'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: {\n      users: state.users,\n      user: state.user,\n      repos: state.repos,\n      loading: state.loading,\n      searchUsers,\n      clearUsers,\n      getUser,\n      getUserRepos\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GithubProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GithubProvider;\nexport default GithubContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"sources":["/Users/timmarks/Documents/Coding/Udemy/traversy-react-front-to-back/react-github-finder/src/context/github/GithubContext.js"],"names":["createContext","useReducer","githubReducer","GithubContext","GITHUB_URL","process","env","REACT_APP_GITHUB_URL","GITHUB_TOKEN","REACT_APP_GITHUB_TOKEN","GithubProvider","children","initialState","users","user","repos","loading","state","dispatch","searchUsers","text","setLoading","params","URLSearchParams","q","response","fetch","headers","Authorization","items","json","type","payload","getUser","login","status","window","location","data","getUserRepos","clearUsers"],"mappings":"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","sourcesContent":["import { createContext, useReducer } from 'react';\nimport githubReducer from './GithubReducer';\n\nconst GithubContext = createContext();\n\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL;\nconst GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN;\n\nexport const GithubProvider = ({children}) => {\n    const initialState = {\n        users: [],\n        user: {},\n        repos: [],\n        loading: false\n    };\n\n    const [state, dispatch] = useReducer(githubReducer, initialState);\n\n    // Get search results\n    const searchUsers = async (text) => {\n        setLoading();\n\n        const params = new URLSearchParams({\n            q: text\n        });\n\n        const response = await fetch(`${GITHUB_URL}/search/users?${params}`, {\n            headers: {\n                Authorization: `token ${GITHUB_TOKEN}`\n            }\n        });\n        \n        const {items} = await response.json();\n        \n        dispatch({\n            type: 'GET_USERS',\n            payload: items\n        });\n    };\n\n    // Get single user\n    const getUser = async (login) => {\n        setLoading();\n\n        const response = await fetch(`${GITHUB_URL}/users/${login}`, {\n            headers: {\n                Authorization: `token ${GITHUB_TOKEN}`\n            }\n        });\n\n        if (response.status === 404) {\n            window.location = '/notfound';\n        } else {\n            const data = await response.json();\n            dispatch({\n                type: 'GET_USER',\n                payload: data\n            });\n        };\n    };\n\n    // Get repos\n    const getUserRepos = async (login) => {\n        setLoading();\n\n        const response = await fetch(`${GITHUB_URL}/users/${login}/repos`, {\n            headers: {\n                Authorization: `token ${GITHUB_TOKEN}`\n            }\n        });\n        \n        const {data} = await response.json();\n        \n        dispatch({\n            type: 'GET_REPOS',\n            payload: data\n        });\n    };\n\n    const clearUsers = () => {\n        dispatch({\n            type: 'CLEAR_USERS'\n        });\n    };\n\n    // Set loading\n    const setLoading = () => {\n        dispatch({\n            type: 'SET_LOADING'\n        });\n    };\n\n    return (\n        <GithubContext.Provider \n            value={{\n                users: state.users, \n                user: state.user,\n                repos: state.repos, \n                loading: state.loading, \n                searchUsers, \n                clearUsers,\n                getUser,\n                getUserRepos\n            }}>\n            {children}\n        </GithubContext.Provider>\n    )};\n\nexport default GithubContext;"]},"metadata":{},"sourceType":"module"}