{"ast":null,"code":"import { createContext, useReducer } from 'react';\nimport githubReducer from './GithubReducer';\nconst GithubContext = /*#__PURE__*/createContext();\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL;\nconst GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN; // export const GithubProvider = ({children}) => {\n//     const initialState = {\n//         users: [],\n//         user: {},\n//         loading: false\n//     };\n//     const [state, dispatch] = useReducer(githubReducer, initialState);\n//     // Get search results\n//     const searchUsers = async (text) => {\n//         setLoading();\n//         const params = new URLSearchParams({\n//             q: text\n//         });\n//         const response = await fetch(`${GITHUB_URL}/search/users?${params}`, {\n//             headers: {\n//                 Authorization: `token ${GITHUB_TOKEN}`\n//             }\n//         });\n//         const {items} = await response.json();\n//         dispatch({\n//             type: 'GET_USERS',\n//             payload: items\n//         });\n//     };\n//     // Get single user\n//     const getUser = async (login) => {\n//         setLoading();\n//         const response = await fetch(`${GITHUB_URL}/user/${login}`, {\n//             headers: {\n//                 Authorization: `token ${GITHUB_TOKEN}`\n//             }\n//         });\n//         if (response.status === 404) {\n//             window.location = '/notfound';\n//         } else {\n//             const data = await response.json();\n//             dispatch({\n//                 type: 'GET_USER',\n//                 payload: data\n//             });\n//         };\n//     };\n//     const clearUsers = () => {\n//         dispatch({\n//             type: 'CLEAR_USERS'\n//         });\n//     };\n//     // Set loading\n//     const setLoading = () => {\n//         dispatch({\n//             type: 'SET_LOADING'\n//         });\n//     };\n//     return \n//         <GithubContext.Provider value={{\n//             users: state.users, \n//             loading: state.loading, \n//             user: state.user, \n//             searchUsers, \n//             clearUsers,\n//             getUser\n//             }}\n//         >\n//         {children}\n//     </GithubContext.Provider>\n// };\n\nexport default GithubContext;","map":{"version":3,"sources":["/Users/timmarks/Documents/Coding/Udemy/traversy-react-front-to-back/react-github-finder/src/context/github/GithubContext.js"],"names":["createContext","useReducer","githubReducer","GithubContext","GITHUB_URL","process","env","REACT_APP_GITHUB_URL","GITHUB_TOKEN","REACT_APP_GITHUB_TOKEN"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,MAAMC,aAAa,gBAAGH,aAAa,EAAnC;AAEA,MAAMI,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B;AACA,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAR,CAAYG,sBAAjC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeN,aAAf","sourcesContent":["import { createContext, useReducer } from 'react';\nimport githubReducer from './GithubReducer';\n\nconst GithubContext = createContext();\n\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL;\nconst GITHUB_TOKEN = process.env.REACT_APP_GITHUB_TOKEN;\n\n// export const GithubProvider = ({children}) => {\n//     const initialState = {\n//         users: [],\n//         user: {},\n//         loading: false\n//     };\n\n//     const [state, dispatch] = useReducer(githubReducer, initialState);\n\n//     // Get search results\n//     const searchUsers = async (text) => {\n//         setLoading();\n\n//         const params = new URLSearchParams({\n//             q: text\n//         });\n\n//         const response = await fetch(`${GITHUB_URL}/search/users?${params}`, {\n//             headers: {\n//                 Authorization: `token ${GITHUB_TOKEN}`\n//             }\n//         });\n        \n//         const {items} = await response.json();\n        \n//         dispatch({\n//             type: 'GET_USERS',\n//             payload: items\n//         });\n//     };\n\n//     // Get single user\n//     const getUser = async (login) => {\n//         setLoading();\n\n//         const response = await fetch(`${GITHUB_URL}/user/${login}`, {\n//             headers: {\n//                 Authorization: `token ${GITHUB_TOKEN}`\n//             }\n//         });\n\n//         if (response.status === 404) {\n//             window.location = '/notfound';\n//         } else {\n//             const data = await response.json();\n            \n//             dispatch({\n//                 type: 'GET_USER',\n//                 payload: data\n//             });\n//         };\n//     };\n\n//     const clearUsers = () => {\n//         dispatch({\n//             type: 'CLEAR_USERS'\n//         });\n//     };\n\n//     // Set loading\n//     const setLoading = () => {\n//         dispatch({\n//             type: 'SET_LOADING'\n//         });\n//     };\n\n//     return \n//         <GithubContext.Provider value={{\n//             users: state.users, \n//             loading: state.loading, \n//             user: state.user, \n//             searchUsers, \n//             clearUsers,\n//             getUser\n//             }}\n//         >\n//         {children}\n//     </GithubContext.Provider>\n// };\n\nexport default GithubContext;"]},"metadata":{},"sourceType":"module"}